
@layout ContentLayout
@page "/Text2Speech"
@inject HttpClient client
@inject IJSRuntime js
@inject NavigationManager nav
@using System;
@using System.IO;
@using Microsoft.AspNetCore.Components.Web

<h3 class="content_title">Text To Speech</h3>
<input id="AudioFinished" type="checkbox" @onchange="@((e)=> { IsPlaying = false; StateHasChanged(); } )" hidden/>
<audio id="audio" style="display:none" />
<div class="div_content">
    <div class="div_content">

        <textarea class="textarea-style" id="erasetext"
                  @bind-value="@ModelText.Text" @bind-value:event="oninput" cols="40" rows="8" />
        <div class="area_button">
            <button class="button_action" @onclick="@DoButton">
                @if (IsDownloading || IsPreparing)
                {
                    <span class="spinner-border spinner-border-sm"
                          style="color:black; width:2rem; height:2rem" role="status" aria-hidden="true" />
                }
                else if (!IsDownloaded)
                {
                    <i class="fas fa-cloud-download-alt" style="color: #008AFC;font-size: larger;" />
                }
                else
                {
                    if (!IsRecorded)
                    {
                        if (!IsRecording)
                        {
                            <i class="fas fa-circle" style="color: #D83F4E; font-size: larger;" />
                        }
                        else
                        {
                            <i class="fas fa-square" style="color: #D83F4E;font-size: larger;"></i>
                        }
                    }
                    else
                    {
                        if (!IsPlaying)
                        {
                            <i class="fas fa-play" style="color: #34B452;font-size: larger;" />
                        }
                        else
                        {
                            <i class="fas fa-pause" style="color: #D83F4E;font-size: larger;" />
                        }
                    }
                }
            </button>
            @if (IsDownloaded && IsRecorded && !IsRecording && !IsPreparing && !IsDownloading)
            {
                @if (IsPlaying)
                {
                    <button class="button_action_small" id="show_hide_bt" @onclick="@StopPlayAudio">
                        <i class="fas fa-square" style="color: #D83F4E; font-size: medium;" />
                    </button>
                }
                else if (IsRecorded)
                {
                    <button class="button_action_small" id="show_hide_bt" @onclick="@StartRecordeAudio">
                        <i class="fas fa-circle" style="color: #D83F4E;font-size: medium;" />
                    </button>
                }
            }
        </div>
    </div>
    <div style="display: flex; width: 80%; justify-content: center;">
        <button class="skipbtn skipbtn1" @onclick="Skip">Skip</button>
        <button class="skipbtn skipbtn2" @onclick="Submit">Submit</button>

    </div>

</div>

@code {
    public bool IsDownloaded { get; set; } = false;
    public bool IsDownloading { get; set; }
    public bool IsPlaying { get; set; } = false;
    public bool IsPreparing { get; set; } = false;
    public bool IsRecorded { get; set; } = false;
    public bool IsRecording { get; set; } = false;

    public ViewModel.AudioFile AudioFile { get; set; }
    public BLL.Sql.Models.TransText ModelText { get; set; }
    public BLL.Sql.ViewModels.TransData TransData { get; set; }

    protected override void OnInitialized()
    {

        AudioFile = new ViewModel.AudioFile();
        ModelText = new BLL.Sql.Models.TransText();
        TransData = new BLL.Sql.ViewModels.TransData();
        InitializVariable();
        base.OnInitialized();
    }
    void InitializVariable()
    {
        IsDownloaded = false;
        IsDownloading = false;
        IsPlaying = false;
        IsPreparing = false;
        IsRecorded = false;
        IsRecording = false;
    }
    public void DoButton()
    {
        if (!IsDownloaded)
        {
            GetText();
        }
        else
        {
            if (!IsRecorded)
            {
                if (!IsRecording)
                {
                    StartRecordeAudio();
                }
                else
                {
                    StopRecordeAudio();
                }
            }
            else
            {
                PlayPauseAudio();
            }
        }
    }
    private async void StartRecordeAudio()
    {
        IsPreparing = true;
        try
        {
            await js.InvokeVoidAsync("startRecording");
            IsRecorded = false;
            IsRecording = true;
        }
        catch (Exception ex)
        {
            await js.InvokeAsync<string>("ShowAlert", ex.ToString());
        }
        IsPreparing = false;
        StateHasChanged();
    }
    private async void StopRecordeAudio()
    {
        IsPreparing = true;
        try
        {
            var json = await js.InvokeAsync<string>("stopRecording");
            if (!string.IsNullOrEmpty(json))
            {
                AudioFile.Info = Newtonsoft.Json.JsonConvert.DeserializeObject<ViewModel.DataAudioFile>(json);
                if (!string.IsNullOrEmpty(AudioFile.Info.path))
                {
                    IsRecording = false;
                    IsRecorded = true;
                    AudioFile.PathFile = AudioFile.Info.path;
                    await js.InvokeVoidAsync("load", AudioFile.Info.path);
                }
            }
            else
            {
                await js.InvokeAsync<string>("ShowAlert", "An error occurred, please re-record the clip");
            }
        }
        catch (Exception ex)
        {
            await js.InvokeAsync<string>("ShowAlert", ex.ToString());
        }
        IsPreparing = false;
        StateHasChanged();
    }
    protected async void PlayPauseAudio()
    {
        IsPreparing = true;
        try
        {
            IsPlaying = await js.InvokeAsync<bool>("playpause");
        }
        catch (Exception ex)
        {
            await js.InvokeAsync<string>("ShowAlert", ex.ToString());
        }
        IsPreparing = false;
        StateHasChanged();
    }
    protected async void StopPlayAudio()
    {
        IsPreparing = true;
        try
        {
            IsPlaying = await js.InvokeAsync<bool>("stop");
        }
        catch (Exception ex)
        {
            await js.InvokeAsync<string>("ShowAlert", ex.ToString());
        }
        IsPreparing = false;
        StateHasChanged();
    }

    private async void GetText()
    {
        IsDownloading = true;
        try
        {
            var Token = await js.InvokeAsync<string>("wasmHelper.getAccessToken");
            var Response = await new BLL.Services.HttpExtension<BLL.Sql.Models.TransText>().GetReturnStatusCodeAndString("TransTexts", Token);
            if (Response.statusCode == System.Net.HttpStatusCode.OK)
            {
                ModelText = Response.body;
                IsDownloaded = true;
            }
            else if (Response.statusCode == System.Net.HttpStatusCode.NotFound)
            {
                await js.InvokeAsync<string>("ShowAlert", "no more text in database, can try Speech to Text mode");
            }
            else
            {
                await js.InvokeAsync<string>("ShowAlert", Response.message);
            }
        }
        catch (Exception ex)
        {
            await js.InvokeAsync<string>("ShowAlert", ex.ToString());
        }
        IsDownloading = false;
        StateHasChanged();
    }
    async void Submit()
    {
        IsPreparing = true;
        try
        {
            if (AudioFile != null && !string.IsNullOrEmpty(AudioFile.PathFile))
            {
                if (!string.IsNullOrWhiteSpace(ModelText.Text))
                {
                    var Duration = await js.InvokeAsync<double>("getDuration");
                    var bytes = Convert.FromBase64String(AudioFile.Info.data.Replace("data:audio/webm;base64,", ""));
                    var streamfile = new MemoryStream(bytes);
                    var Token = await js.InvokeAsync<string>("wasmHelper.getAccessToken");
                    var User = BLL.Services.JWT.GetUser(Token);
                    TransData = new BLL.Sql.ViewModels.TransData
                    {
                        AudioFile = new BLL.Sql.ViewModels.AudioFile
                        {
                            ID = Guid.NewGuid(),
                            Length = TimeSpan.FromSeconds(Duration),
                            SpeakerAge = User.Age,
                            SpeakerGender = User.Gender,
                        },
                        TransText = new BLL.Sql.Models.TransText
                        {
                            Text = ModelText.Text,
                            ID = ModelText.ID,
                            Dialect = ModelText.Dialect,
                        },
                        TypePost = BLL.Enum.TypePost.Audio
                    };

                    var result = await BLL.Services.UploadFile.UploadAudioAsync(TransData.AudioFile.ID, Token, streamfile, "Blazor");
                    if (result.statusCode == System.Net.HttpStatusCode.Created)
                    {
                        var response = await new BLL.Services.HttpExtension<BLL.Sql.ViewModels.TransData>().PostReturnStatusCodeAndString("TransDatas", TransData, Token);
                        nav.NavigateTo($"/StatusPage/Text To Speech/{response.statusCode == System.Net.HttpStatusCode.OK}");
                    }
                    else
                    {
                        await js.InvokeAsync<string>("ShowAlert", result.message);
                    }
                }
                else
                    await js.InvokeAsync<string>("ShowAlert", "The text must not be empty");
            }
        }
        catch (Exception ex)
        {
            await js.InvokeAsync<string>("ShowAlert", ex.ToString());
        }
        IsPreparing = false;
        StateHasChanged();
    }
    async void Skip()
    {
        try
        {
            IsPreparing = true;
            if (IsPlaying)
                StopPlayAudio();
            else if (IsRecording)
                StopRecordeAudio();
            TransData = new BLL.Sql.ViewModels.TransData
            {
                TransText = new BLL.Sql.Models.TransText
                {
                    ID = ModelText.ID,
                    Status = BLL.Enum.Status.Rejected,
                },
                TypePost = BLL.Enum.TypePost.Audio
            };
            var Token = await js.InvokeAsync<string>("wasmHelper.getAccessToken");
            var response = await new BLL.Services.HttpExtension<BLL.Sql.ViewModels.TransData>().PostReturnStatusCodeAndString("TransDatas", TransData, Token);

            InitializVariable();
        }
        catch (Exception ex)
        {
            await js.InvokeAsync<string>("ShowAlert", ex.ToString());
        }
        IsPreparing = false;
        StateHasChanged();
    }
}
