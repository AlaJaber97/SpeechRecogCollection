@layout MainLayout
@page "/"
@page "/Login"
@inject HttpClient client
@inject NavigationManager nav
@inject IJSRuntime js

<div class="login100-form validate-form middlepane">

    <h3 class="login100-form-title">LOGIN</h3>

    <div class="container-login100-form-btn">
        <div align="left" style="width: 100%;">
            <label class="subtitle">Email:</label>
            <div class="inputWithIcon">
                <input type="email" @bind="SignIn.Email" placeholder="you@example.com">
                <i class="fas fa-user"></i>
            </div>
            @if (!string.IsNullOrEmpty(ErrorText))
            {
                <label style="color:red;">@ErrorText</label>
            }
        </div>
        <a class="btn login100-form-btn" @onclick="Signin" style="margin-top:20px;margin-bottom:20px;color:white">
            @if (IsBusy)
            {
                <span class="spinner-border spinner-border-sm" style="font-size:large;" role="status" aria-hidden="true"></span>
            }
            else
            {
                <span>Login</span>
            }
        </a>
    </div>

    @*<div style="align-items: baseline; display: flex; margin-left: auto;">
        <div class="round">
            <input type="checkbox" id="checkbox" @bind="@RememberMe"/>
            <label for="checkbox"></label>
        </div>
        <label style="color:#8F8F8F; font-family:segoeui;margin-left: 25px;"> Remember me</label>
    </div>*@
</div>

@code {

    //@inject Services.SessionAccesser Session
    //@inject AuthenticationStateProvider AuthStateProvider
    public BLL.Sql.Models.LoginAndRegister.Login SignIn { get; set; }
    public string ErrorText { get; set; }
    public bool IsBusy { get; set; }
    public bool RememberMe { get; set; }
    protected override void OnInitialized()
    {
        SignIn = new BLL.Sql.Models.LoginAndRegister.Login();
        base.OnInitialized();
    }

    async void Signin()
    {
        if (!IsBusy)
        {
            try
            {
                IsBusy = true;
                StateHasChanged();
                if (!string.IsNullOrWhiteSpace(SignIn.Email))
                {
                    SignIn.Email = SignIn.Email.Trim();
                    var response = await new BLL.Services.HttpExtension<BLL.Sql.Models.LoginAndRegister.Login>().PostReturnStatusCodeAndString("Account/Login", SignIn, null);

                    if (response.statusCode == System.Net.HttpStatusCode.OK)
                    {
                        var token = response.message;
                        //Session.Set("Jwt", token);
                        //AppStatic.Token = token;
                        //AppStatic.User = BLL.Services.JWT.GetUser(token);
                        //if(RememberMe)
                        await js.InvokeAsync<string>("wasmHelper.saveAccessToken",token);
                        //((Web.Services.CustomAuthenticationStateProvider)AuthStateProvider).MarkUserAsAuthenticated();
                        nav.NavigateTo("/Speech2Text");
                    }
                    else
                    {
                        ErrorText = response.message;
                    }
                }
                else
                {
                    ErrorText = "this field is required";
                }
            }
            catch (Exception ex)
            {
                ErrorText = ex.ToString();
            }
            IsBusy = false;
            StateHasChanged();
        }
    }
}
